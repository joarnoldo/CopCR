//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CopCR.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CopCR_DevEntities : DbContext
    {
        public CopCR_DevEntities()
            : base("name=CopCR_DevEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrador> Administrador { get; set; }
        public virtual DbSet<Canton> Canton { get; set; }
        public virtual DbSet<CategoriaIncidente> CategoriaIncidente { get; set; }
        public virtual DbSet<Direccion> Direccion { get; set; }
        public virtual DbSet<Distrito> Distrito { get; set; }
        public virtual DbSet<Incidente> Incidente { get; set; }
        public virtual DbSet<IncidenteAdjunto> IncidenteAdjunto { get; set; }
        public virtual DbSet<Notificacion> Notificacion { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<UsuarioFinal> UsuarioFinal { get; set; }
    
        public virtual int RegistroUsuario(string cedulaIdentidad, string nombre, string primerApellido, string segundoApellido, string email, string nombreUsuario, string contrasena, Nullable<System.DateTime> fechaNacimiento, string telefonoContacto, string fotoPerfilUrl)
        {
            var cedulaIdentidadParameter = cedulaIdentidad != null ?
                new ObjectParameter("CedulaIdentidad", cedulaIdentidad) :
                new ObjectParameter("CedulaIdentidad", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("SegundoApellido", segundoApellido) :
                new ObjectParameter("SegundoApellido", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nombreUsuarioParameter = nombreUsuario != null ?
                new ObjectParameter("NombreUsuario", nombreUsuario) :
                new ObjectParameter("NombreUsuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("Contrasena", contrasena) :
                new ObjectParameter("Contrasena", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var telefonoContactoParameter = telefonoContacto != null ?
                new ObjectParameter("TelefonoContacto", telefonoContacto) :
                new ObjectParameter("TelefonoContacto", typeof(string));
    
            var fotoPerfilUrlParameter = fotoPerfilUrl != null ?
                new ObjectParameter("FotoPerfilUrl", fotoPerfilUrl) :
                new ObjectParameter("FotoPerfilUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegistroUsuario", cedulaIdentidadParameter, nombreParameter, primerApellidoParameter, segundoApellidoParameter, emailParameter, nombreUsuarioParameter, contrasenaParameter, fechaNacimientoParameter, telefonoContactoParameter, fotoPerfilUrlParameter);
        }
    
        public virtual ObjectResult<ValidarInicioSesion_Result> ValidarInicioSesion(string cedulaIdentidad)
        {
            var cedulaIdentidadParameter = cedulaIdentidad != null ?
                new ObjectParameter("CedulaIdentidad", cedulaIdentidad) :
                new ObjectParameter("CedulaIdentidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidarInicioSesion_Result>("ValidarInicioSesion", cedulaIdentidadParameter);
        }
    }
}
